#pragma once

#include "spirv.h"
#define SPV_REVISION 2

GRD_REFLECT(SpvSourceLanguage) {
    ENUM_VALUE(SpvSourceLanguageUnknown);
    ENUM_VALUE(SpvSourceLanguageESSL);
    ENUM_VALUE(SpvSourceLanguageGLSL);
    ENUM_VALUE(SpvSourceLanguageOpenCL_C);
    ENUM_VALUE(SpvSourceLanguageOpenCL_CPP);
    ENUM_VALUE(SpvSourceLanguageHLSL);
    ENUM_VALUE(SpvSourceLanguageMax);
}

GRD_REFLECT(SpvExecutionModel) {
    ENUM_VALUE(SpvExecutionModelVertex);
    ENUM_VALUE(SpvExecutionModelTessellationControl);
    ENUM_VALUE(SpvExecutionModelTessellationEvaluation);
    ENUM_VALUE(SpvExecutionModelGeometry);
    ENUM_VALUE(SpvExecutionModelFragment);
    ENUM_VALUE(SpvExecutionModelGLCompute);
    ENUM_VALUE(SpvExecutionModelKernel);
    ENUM_VALUE(SpvExecutionModelMax);
}

GRD_REFLECT(SpvAddressingModel) {
    ENUM_VALUE(SpvAddressingModelLogical);
    ENUM_VALUE(SpvAddressingModelPhysical32);
    ENUM_VALUE(SpvAddressingModelPhysical64);
    ENUM_VALUE(SpvAddressingModelMax);
}

GRD_REFLECT(SpvMemoryModel) {
    ENUM_VALUE(SpvMemoryModelSimple);
    ENUM_VALUE(SpvMemoryModelGLSL450);
    ENUM_VALUE(SpvMemoryModelOpenCL);
    ENUM_VALUE(SpvMemoryModelMax);
}

GRD_REFLECT(SpvExecutionMode) {
    ENUM_VALUE(SpvExecutionModeInvocations);
    ENUM_VALUE(SpvExecutionModeSpacingEqual);
    ENUM_VALUE(SpvExecutionModeSpacingFractionalEven);
    ENUM_VALUE(SpvExecutionModeSpacingFractionalOdd);
    ENUM_VALUE(SpvExecutionModeVertexOrderCw);
    ENUM_VALUE(SpvExecutionModeVertexOrderCcw);
    ENUM_VALUE(SpvExecutionModePixelCenterInteger);	
    ENUM_VALUE(SpvExecutionModeOriginUpperLeft);
    ENUM_VALUE(SpvExecutionModeOriginLowerLeft);
    ENUM_VALUE(SpvExecutionModeEarlyFragmentTests);
    ENUM_VALUE(SpvExecutionModePointMode);
    ENUM_VALUE(SpvExecutionModeXfb);
    ENUM_VALUE(SpvExecutionModeDepthReplacing);
    ENUM_VALUE(SpvExecutionModeDepthGreater);
	ENUM_VALUE(SpvExecutionModeDepthLess);
    ENUM_VALUE(SpvExecutionModeDepthUnchanged);
    ENUM_VALUE(SpvExecutionModeLocalSize);
    ENUM_VALUE(SpvExecutionModeLocalSizeHint);
    ENUM_VALUE(SpvExecutionModeInputPoints);
    ENUM_VALUE(SpvExecutionModeInputLines);
    ENUM_VALUE(SpvExecutionModeInputLinesAdjacency);
    ENUM_VALUE(SpvExecutionModeTriangles);
    ENUM_VALUE(SpvExecutionModeInputTrianglesAdjacency);
    ENUM_VALUE(SpvExecutionModeQuads);
    ENUM_VALUE(SpvExecutionModeIsolines);
    ENUM_VALUE(SpvExecutionModeOutputVertices);
    ENUM_VALUE(SpvExecutionModeOutputPoints);
    ENUM_VALUE(SpvExecutionModeOutputLineStrip);
    ENUM_VALUE(SpvExecutionModeOutputTriangleStrip);
    ENUM_VALUE(SpvExecutionModeVecTypeHint);
    ENUM_VALUE(SpvExecutionModeContractionOff);
    ENUM_VALUE(SpvExecutionModeInitializer);
    ENUM_VALUE(SpvExecutionModeFinalizer);
    ENUM_VALUE(SpvExecutionModeSubgroupSize);
    ENUM_VALUE(SpvExecutionModeSubgroupsPerWorkgroup);
    ENUM_VALUE(SpvExecutionModeSubgroupsPerWorkgroupId);
    ENUM_VALUE(SpvExecutionModeLocalSizeId);
    ENUM_VALUE(SpvExecutionModeLocalSizeHintId);
    ENUM_VALUE(SpvExecutionModePostDepthCoverage);
    ENUM_VALUE(SpvExecutionModeStencilRefReplacingEXT);
    ENUM_VALUE(SpvExecutionModeMax);
};

GRD_REFLECT(SpvStorageClass) {
    ENUM_VALUE(SpvStorageClassUniformConstant);
    ENUM_VALUE(SpvStorageClassInput);
    ENUM_VALUE(SpvStorageClassUniform);
    ENUM_VALUE(SpvStorageClassOutput);
    ENUM_VALUE(SpvStorageClassWorkgroup);
    ENUM_VALUE(SpvStorageClassCrossWorkgroup);
    ENUM_VALUE(SpvStorageClassPrivate);
    ENUM_VALUE(SpvStorageClassFunction);
    ENUM_VALUE(SpvStorageClassGeneric);
    ENUM_VALUE(SpvStorageClassPushConstant);
    ENUM_VALUE(SpvStorageClassAtomicCounter);
    ENUM_VALUE(SpvStorageClassImage);
    ENUM_VALUE(SpvStorageClassStorageBuffer);
    ENUM_VALUE(SpvStorageClassMax);
}

GRD_REFLECT(SpvDim) {
    ENUM_VALUE(SpvDim1D);
    ENUM_VALUE(SpvDim2D);
    ENUM_VALUE(SpvDim3D);
    ENUM_VALUE(SpvDimCube);
    ENUM_VALUE(SpvDimRect);
    ENUM_VALUE(SpvDimBuffer);
    ENUM_VALUE(SpvDimSubpassData);
    ENUM_VALUE(SpvDimMax);
};

GRD_REFLECT(SpvSamplerAddressingMode) {
    ENUM_VALUE(SpvSamplerAddressingModeNone);
    ENUM_VALUE(SpvSamplerAddressingModeClampToEdge);
    ENUM_VALUE(SpvSamplerAddressingModeClamp);
    ENUM_VALUE(SpvSamplerAddressingModeRepeat);
    ENUM_VALUE(SpvSamplerAddressingModeRepeatMirrored);
    ENUM_VALUE(SpvSamplerAddressingModeMax);
};

GRD_REFLECT(SpvSamplerFilterMode) {
    ENUM_VALUE(SpvSamplerFilterModeNearest);
    ENUM_VALUE(SpvSamplerFilterModeLinear);
    ENUM_VALUE(SpvSamplerFilterModeMax);
};

GRD_REFLECT(SpvImageFormat) {
    ENUM_VALUE(SpvImageFormatUnknown);
    ENUM_VALUE(SpvImageFormatRgba32f);
    ENUM_VALUE(SpvImageFormatRgba16f);
    ENUM_VALUE(SpvImageFormatR32f);
    ENUM_VALUE(SpvImageFormatRgba8);
    ENUM_VALUE(SpvImageFormatRgba8Snorm);
    ENUM_VALUE(SpvImageFormatRg32f);
    ENUM_VALUE(SpvImageFormatRg16f);
    ENUM_VALUE(SpvImageFormatR11fG11fB10f);
    ENUM_VALUE(SpvImageFormatR16f);
    ENUM_VALUE(SpvImageFormatRgba16);
    ENUM_VALUE(SpvImageFormatRgb10A2);
    ENUM_VALUE(SpvImageFormatRg16);
    ENUM_VALUE(SpvImageFormatRg8);
    ENUM_VALUE(SpvImageFormatR16);
    ENUM_VALUE(SpvImageFormatR8);
    ENUM_VALUE(SpvImageFormatRgba16Snorm);
    ENUM_VALUE(SpvImageFormatRg16Snorm);
    ENUM_VALUE(SpvImageFormatRg8Snorm);
    ENUM_VALUE(SpvImageFormatR16Snorm);
    ENUM_VALUE(SpvImageFormatR8Snorm);
    ENUM_VALUE(SpvImageFormatRgba32i);
    ENUM_VALUE(SpvImageFormatRgba16i);
    ENUM_VALUE(SpvImageFormatRgba8i);
    ENUM_VALUE(SpvImageFormatR32i);
    ENUM_VALUE(SpvImageFormatRg32i);
    ENUM_VALUE(SpvImageFormatRg16i);
    ENUM_VALUE(SpvImageFormatRg8i);
    ENUM_VALUE(SpvImageFormatR16i);
    ENUM_VALUE(SpvImageFormatR8i);
    ENUM_VALUE(SpvImageFormatRgba32ui);
    ENUM_VALUE(SpvImageFormatRgba16ui);
    ENUM_VALUE(SpvImageFormatRgba8ui);
    ENUM_VALUE(SpvImageFormatR32ui);
    ENUM_VALUE(SpvImageFormatRgb10a2ui);
    ENUM_VALUE(SpvImageFormatRg32ui);
    ENUM_VALUE(SpvImageFormatRg16ui);
    ENUM_VALUE(SpvImageFormatRg8ui);
    ENUM_VALUE(SpvImageFormatR16ui);
    ENUM_VALUE(SpvImageFormatR8ui);
    ENUM_VALUE(SpvImageFormatMax);
};

GRD_REFLECT(SpvImageChannelOrder) {
    ENUM_VALUE(SpvImageChannelOrderR);
    ENUM_VALUE(SpvImageChannelOrderA);
    ENUM_VALUE(SpvImageChannelOrderRG);
    ENUM_VALUE(SpvImageChannelOrderRA);
    ENUM_VALUE(SpvImageChannelOrderRGB);
    ENUM_VALUE(SpvImageChannelOrderRGBA);
    ENUM_VALUE(SpvImageChannelOrderBGRA);
    ENUM_VALUE(SpvImageChannelOrderARGB);
    ENUM_VALUE(SpvImageChannelOrderIntensity);
    ENUM_VALUE(SpvImageChannelOrderLuminance);
    ENUM_VALUE(SpvImageChannelOrderRx);
    ENUM_VALUE(SpvImageChannelOrderRGx);
    ENUM_VALUE(SpvImageChannelOrderRGBx);
    ENUM_VALUE(SpvImageChannelOrderDepth);
    ENUM_VALUE(SpvImageChannelOrderDepthStencil);
    ENUM_VALUE(SpvImageChannelOrdersRGB);
    ENUM_VALUE(SpvImageChannelOrdersRGBx);
    ENUM_VALUE(SpvImageChannelOrdersRGBA);
    ENUM_VALUE(SpvImageChannelOrdersBGRA);
    ENUM_VALUE(SpvImageChannelOrderABGR);
    ENUM_VALUE(SpvImageChannelOrderMax);
};

GRD_REFLECT(SpvImageChannelDataType) {
    ENUM_VALUE(SpvImageChannelDataTypeSnormInt8);
    ENUM_VALUE(SpvImageChannelDataTypeSnormInt16);
    ENUM_VALUE(SpvImageChannelDataTypeUnormInt8);
    ENUM_VALUE(SpvImageChannelDataTypeUnormInt16);
    ENUM_VALUE(SpvImageChannelDataTypeUnormShort565);
    ENUM_VALUE(SpvImageChannelDataTypeUnormShort555);
    ENUM_VALUE(SpvImageChannelDataTypeUnormInt101010);
    ENUM_VALUE(SpvImageChannelDataTypeSignedInt8);
    ENUM_VALUE(SpvImageChannelDataTypeSignedInt16);
    ENUM_VALUE(SpvImageChannelDataTypeSignedInt32);
    ENUM_VALUE(SpvImageChannelDataTypeUnsignedInt8);
    ENUM_VALUE(SpvImageChannelDataTypeUnsignedInt16);
    ENUM_VALUE(SpvImageChannelDataTypeUnsignedInt32);
    ENUM_VALUE(SpvImageChannelDataTypeHalfFloat);
    ENUM_VALUE(SpvImageChannelDataTypeFloat);
    ENUM_VALUE(SpvImageChannelDataTypeUnormInt24);
    ENUM_VALUE(SpvImageChannelDataTypeUnormInt101010_2);
    ENUM_VALUE(SpvImageChannelDataTypeMax);
};

GRD_REFLECT(SpvImageOperandsShift) {
    ENUM_VALUE(SpvImageOperandsBiasShift);
    ENUM_VALUE(SpvImageOperandsLodShift);
    ENUM_VALUE(SpvImageOperandsGradShift);
    ENUM_VALUE(SpvImageOperandsConstOffsetShift);
    ENUM_VALUE(SpvImageOperandsOffsetShift);
    ENUM_VALUE(SpvImageOperandsConstOffsetsShift);
    ENUM_VALUE(SpvImageOperandsSampleShift);
    ENUM_VALUE(SpvImageOperandsMinLodShift);
    ENUM_VALUE(SpvImageOperandsMax);
};

GRD_REFLECT(SpvImageOperandsMask) {
    ENUM_VALUE(SpvImageOperandsMaskNone);
    ENUM_VALUE(SpvImageOperandsBiasMask);
    ENUM_VALUE(SpvImageOperandsLodMask);
    ENUM_VALUE(SpvImageOperandsGradMask);
    ENUM_VALUE(SpvImageOperandsConstOffsetMask);
    ENUM_VALUE(SpvImageOperandsOffsetMask);
    ENUM_VALUE(SpvImageOperandsConstOffsetsMask);
    ENUM_VALUE(SpvImageOperandsSampleMask);
    ENUM_VALUE(SpvImageOperandsMinLodMask);
};

GRD_REFLECT(SpvFPFastMathModeShift) {
    ENUM_VALUE(SpvFPFastMathModeNotNaNShift);
    ENUM_VALUE(SpvFPFastMathModeNotInfShift);
    ENUM_VALUE(SpvFPFastMathModeNSZShift);
    ENUM_VALUE(SpvFPFastMathModeAllowRecipShift);
    ENUM_VALUE(SpvFPFastMathModeFastShift);
    ENUM_VALUE(SpvFPFastMathModeMax);
};

GRD_REFLECT(SpvFPFastMathModeMask) {
    ENUM_VALUE(SpvFPFastMathModeMaskNone);
    ENUM_VALUE(SpvFPFastMathModeNotNaNMask);
    ENUM_VALUE(SpvFPFastMathModeNotInfMask);
    ENUM_VALUE(SpvFPFastMathModeNSZMask);
    ENUM_VALUE(SpvFPFastMathModeAllowRecipMask);
    ENUM_VALUE(SpvFPFastMathModeFastMask);
};

GRD_REFLECT(SpvFPRoundingMode) {
    ENUM_VALUE(SpvFPRoundingModeRTE);
    ENUM_VALUE(SpvFPRoundingModeRTZ);
    ENUM_VALUE(SpvFPRoundingModeRTP);
    ENUM_VALUE(SpvFPRoundingModeRTN);
    ENUM_VALUE(SpvFPRoundingModeMax);
};

GRD_REFLECT(SpvLinkageType) {
    ENUM_VALUE(SpvLinkageTypeExport);
    ENUM_VALUE(SpvLinkageTypeImport);
    ENUM_VALUE(SpvLinkageTypeMax);
};

GRD_REFLECT(SpvAccessQualifier) {
    ENUM_VALUE(SpvAccessQualifierReadOnly);
    ENUM_VALUE(SpvAccessQualifierWriteOnly);
    ENUM_VALUE(SpvAccessQualifierReadWrite);
    ENUM_VALUE(SpvAccessQualifierMax);
};

GRD_REFLECT(SpvFunctionParameterAttribute) {
    ENUM_VALUE(SpvFunctionParameterAttributeZext);
    ENUM_VALUE(SpvFunctionParameterAttributeSext);
    ENUM_VALUE(SpvFunctionParameterAttributeByVal);
    ENUM_VALUE(SpvFunctionParameterAttributeSret);
    ENUM_VALUE(SpvFunctionParameterAttributeNoAlias);
    ENUM_VALUE(SpvFunctionParameterAttributeNoCapture);
    ENUM_VALUE(SpvFunctionParameterAttributeNoWrite);
    ENUM_VALUE(SpvFunctionParameterAttributeNoReadWrite);
    ENUM_VALUE(SpvFunctionParameterAttributeMax);
};

GRD_REFLECT(SpvDecoration) {
    ENUM_VALUE(SpvDecorationRelaxedPrecision);
    ENUM_VALUE(SpvDecorationSpecId);
    ENUM_VALUE(SpvDecorationBlock);
    ENUM_VALUE(SpvDecorationBufferBlock);
    ENUM_VALUE(SpvDecorationRowMajor);
    ENUM_VALUE(SpvDecorationColMajor);
    ENUM_VALUE(SpvDecorationArrayStride);
    ENUM_VALUE(SpvDecorationMatrixStride);
    ENUM_VALUE(SpvDecorationGLSLShared);
    ENUM_VALUE(SpvDecorationGLSLPacked);
    ENUM_VALUE(SpvDecorationCPacked);
    ENUM_VALUE(SpvDecorationBuiltIn);
    ENUM_VALUE(SpvDecorationNoPerspective);
    ENUM_VALUE(SpvDecorationFlat);
    ENUM_VALUE(SpvDecorationPatch);
    ENUM_VALUE(SpvDecorationCentroid);
    ENUM_VALUE(SpvDecorationSample);
    ENUM_VALUE(SpvDecorationInvariant);
    ENUM_VALUE(SpvDecorationRestrict);
    ENUM_VALUE(SpvDecorationAliased);
    ENUM_VALUE(SpvDecorationVolatile);
    ENUM_VALUE(SpvDecorationConstant);
    ENUM_VALUE(SpvDecorationCoherent);
    ENUM_VALUE(SpvDecorationNonWritable);
    ENUM_VALUE(SpvDecorationNonReadable);
    ENUM_VALUE(SpvDecorationUniform);
    ENUM_VALUE(SpvDecorationSaturatedConversion);
    ENUM_VALUE(SpvDecorationStream);
    ENUM_VALUE(SpvDecorationLocation);
    ENUM_VALUE(SpvDecorationComponent);
    ENUM_VALUE(SpvDecorationIndex);
    ENUM_VALUE(SpvDecorationBinding);
    ENUM_VALUE(SpvDecorationDescriptorSet);
    ENUM_VALUE(SpvDecorationOffset);
    ENUM_VALUE(SpvDecorationXfbBuffer);
    ENUM_VALUE(SpvDecorationXfbStride);
    ENUM_VALUE(SpvDecorationFuncParamAttr);
    ENUM_VALUE(SpvDecorationFPRoundingMode);
    ENUM_VALUE(SpvDecorationFPFastMathMode);
    ENUM_VALUE(SpvDecorationLinkageAttributes);
    ENUM_VALUE(SpvDecorationNoContraction);
    ENUM_VALUE(SpvDecorationInputAttachmentIndex);
    ENUM_VALUE(SpvDecorationAlignment);
    ENUM_VALUE(SpvDecorationMaxByteOffset);
    ENUM_VALUE(SpvDecorationAlignmentId);
    ENUM_VALUE(SpvDecorationMaxByteOffsetId);
    ENUM_VALUE(SpvDecorationExplicitInterpAMD);
    ENUM_VALUE(SpvDecorationOverrideCoverageNV);
    ENUM_VALUE(SpvDecorationPassthroughNV);
    ENUM_VALUE(SpvDecorationViewportRelativeNV);
    ENUM_VALUE(SpvDecorationSecondaryViewportRelativeNV);
    ENUM_VALUE(SpvDecorationHlslCounterBufferGOOGLE);
    ENUM_VALUE(SpvDecorationHlslSemanticGOOGLE);
    ENUM_VALUE(SpvDecorationMax);
};

GRD_REFLECT(SpvBuiltIn) {
    ENUM_VALUE(SpvBuiltInPosition);
    ENUM_VALUE(SpvBuiltInPointSize);
    ENUM_VALUE(SpvBuiltInClipDistance);
    ENUM_VALUE(SpvBuiltInCullDistance);
    ENUM_VALUE(SpvBuiltInVertexId);
    ENUM_VALUE(SpvBuiltInInstanceId);
    ENUM_VALUE(SpvBuiltInPrimitiveId);
    ENUM_VALUE(SpvBuiltInInvocationId);
    ENUM_VALUE(SpvBuiltInLayer);
    ENUM_VALUE(SpvBuiltInViewportIndex);
    ENUM_VALUE(SpvBuiltInTessLevelOuter);
    ENUM_VALUE(SpvBuiltInTessLevelInner);
    ENUM_VALUE(SpvBuiltInTessCoord);
    ENUM_VALUE(SpvBuiltInPatchVertices);
    ENUM_VALUE(SpvBuiltInFragCoord);
    ENUM_VALUE(SpvBuiltInPointCoord);
    ENUM_VALUE(SpvBuiltInFrontFacing);
    ENUM_VALUE(SpvBuiltInSampleId);
    ENUM_VALUE(SpvBuiltInSamplePosition);
    ENUM_VALUE(SpvBuiltInSampleMask);
    ENUM_VALUE(SpvBuiltInFragDepth);
    ENUM_VALUE(SpvBuiltInHelperInvocation);
    ENUM_VALUE(SpvBuiltInNumWorkgroups);
    ENUM_VALUE(SpvBuiltInWorkgroupSize);
    ENUM_VALUE(SpvBuiltInWorkgroupId);
    ENUM_VALUE(SpvBuiltInLocalInvocationId);
    ENUM_VALUE(SpvBuiltInGlobalInvocationId);
    ENUM_VALUE(SpvBuiltInLocalInvocationIndex);
    ENUM_VALUE(SpvBuiltInWorkDim);
    ENUM_VALUE(SpvBuiltInGlobalSize);
    ENUM_VALUE(SpvBuiltInEnqueuedWorkgroupSize);
    ENUM_VALUE(SpvBuiltInGlobalOffset);
    ENUM_VALUE(SpvBuiltInGlobalLinearId);
    ENUM_VALUE(SpvBuiltInSubgroupSize);
    ENUM_VALUE(SpvBuiltInSubgroupMaxSize);
    ENUM_VALUE(SpvBuiltInNumSubgroups);
    ENUM_VALUE(SpvBuiltInNumEnqueuedSubgroups);
    ENUM_VALUE(SpvBuiltInSubgroupId);
    ENUM_VALUE(SpvBuiltInSubgroupLocalInvocationId);
    ENUM_VALUE(SpvBuiltInVertexIndex);
    ENUM_VALUE(SpvBuiltInInstanceIndex);
    ENUM_VALUE(SpvBuiltInSubgroupEqMaskKHR);
    ENUM_VALUE(SpvBuiltInSubgroupGeMaskKHR);
    ENUM_VALUE(SpvBuiltInSubgroupGtMaskKHR);
    ENUM_VALUE(SpvBuiltInSubgroupLeMaskKHR);
    ENUM_VALUE(SpvBuiltInSubgroupLtMaskKHR);
    ENUM_VALUE(SpvBuiltInBaseVertex);
    ENUM_VALUE(SpvBuiltInBaseInstance);
    ENUM_VALUE(SpvBuiltInDrawIndex);
    ENUM_VALUE(SpvBuiltInDeviceIndex);
    ENUM_VALUE(SpvBuiltInViewIndex);
    ENUM_VALUE(SpvBuiltInBaryCoordNoPerspAMD);
    ENUM_VALUE(SpvBuiltInBaryCoordNoPerspCentroidAMD);
    ENUM_VALUE(SpvBuiltInBaryCoordNoPerspSampleAMD);
    ENUM_VALUE(SpvBuiltInBaryCoordSmoothAMD);
    ENUM_VALUE(SpvBuiltInBaryCoordSmoothCentroidAMD);
    ENUM_VALUE(SpvBuiltInBaryCoordSmoothSampleAMD);
    ENUM_VALUE(SpvBuiltInBaryCoordPullModelAMD);
    ENUM_VALUE(SpvBuiltInFragStencilRefEXT);
    ENUM_VALUE(SpvBuiltInViewportMaskNV);
    ENUM_VALUE(SpvBuiltInSecondaryPositionNV);
    ENUM_VALUE(SpvBuiltInSecondaryViewportMaskNV);
    ENUM_VALUE(SpvBuiltInPositionPerViewNV);
    ENUM_VALUE(SpvBuiltInViewportMaskPerViewNV);
    ENUM_VALUE(SpvBuiltInMax);
};

GRD_REFLECT(SpvSelectionControlShift) {
    ENUM_VALUE(SpvSelectionControlFlattenShift);
    ENUM_VALUE(SpvSelectionControlDontFlattenShift);
    ENUM_VALUE(SpvSelectionControlMax);
};

GRD_REFLECT(SpvSelectionControlMask) {
    ENUM_VALUE(SpvSelectionControlMaskNone);
    ENUM_VALUE(SpvSelectionControlFlattenMask);
    ENUM_VALUE(SpvSelectionControlDontFlattenMask);
};

GRD_REFLECT(SpvLoopControlShift) {
    ENUM_VALUE(SpvLoopControlUnrollShift);
    ENUM_VALUE(SpvLoopControlDontUnrollShift);
    ENUM_VALUE(SpvLoopControlDependencyInfiniteShift);
    ENUM_VALUE(SpvLoopControlDependencyLengthShift);
    ENUM_VALUE(SpvLoopControlMax);
};

GRD_REFLECT(SpvLoopControlMask) {
    ENUM_VALUE(SpvLoopControlMaskNone);
    ENUM_VALUE(SpvLoopControlUnrollMask);
    ENUM_VALUE(SpvLoopControlDontUnrollMask);
    ENUM_VALUE(SpvLoopControlDependencyInfiniteMask);
    ENUM_VALUE(SpvLoopControlDependencyLengthMask);
};

GRD_REFLECT(SpvFunctionControlShift) {
    ENUM_VALUE(SpvFunctionControlInlineShift);
    ENUM_VALUE(SpvFunctionControlDontInlineShift);
    ENUM_VALUE(SpvFunctionControlPureShift);
    ENUM_VALUE(SpvFunctionControlConstShift);
    ENUM_VALUE(SpvFunctionControlMax);
};

GRD_REFLECT(SpvFunctionControlMask) {
    ENUM_VALUE(SpvFunctionControlMaskNone);
    ENUM_VALUE(SpvFunctionControlInlineMask);
    ENUM_VALUE(SpvFunctionControlDontInlineMask);
    ENUM_VALUE(SpvFunctionControlPureMask);
    ENUM_VALUE(SpvFunctionControlConstMask);
};

GRD_REFLECT(SpvMemorySemanticsShift) {
    ENUM_VALUE(SpvMemorySemanticsAcquireShift);
    ENUM_VALUE(SpvMemorySemanticsReleaseShift);
    ENUM_VALUE(SpvMemorySemanticsAcquireReleaseShift);
    ENUM_VALUE(SpvMemorySemanticsSequentiallyConsistentShift);
    ENUM_VALUE(SpvMemorySemanticsUniformMemoryShift);
    ENUM_VALUE(SpvMemorySemanticsSubgroupMemoryShift);
    ENUM_VALUE(SpvMemorySemanticsWorkgroupMemoryShift);
    ENUM_VALUE(SpvMemorySemanticsCrossWorkgroupMemoryShift);
    ENUM_VALUE(SpvMemorySemanticsAtomicCounterMemoryShift);
    ENUM_VALUE(SpvMemorySemanticsImageMemoryShift);
    ENUM_VALUE(SpvMemorySemanticsMax);
};

GRD_REFLECT(SpvMemorySemanticsMask) {
    ENUM_VALUE(SpvMemorySemanticsMaskNone);
    ENUM_VALUE(SpvMemorySemanticsAcquireMask);
    ENUM_VALUE(SpvMemorySemanticsReleaseMask);
    ENUM_VALUE(SpvMemorySemanticsAcquireReleaseMask);
    ENUM_VALUE(SpvMemorySemanticsSequentiallyConsistentMask);
    ENUM_VALUE(SpvMemorySemanticsUniformMemoryMask);
    ENUM_VALUE(SpvMemorySemanticsSubgroupMemoryMask);
    ENUM_VALUE(SpvMemorySemanticsWorkgroupMemoryMask);
    ENUM_VALUE(SpvMemorySemanticsCrossWorkgroupMemoryMask);
    ENUM_VALUE(SpvMemorySemanticsAtomicCounterMemoryMask);
    ENUM_VALUE(SpvMemorySemanticsImageMemoryMask);
};

GRD_REFLECT(SpvMemoryAccessShift) {
    ENUM_VALUE(SpvMemoryAccessVolatileShift);
    ENUM_VALUE(SpvMemoryAccessAlignedShift);
    ENUM_VALUE(SpvMemoryAccessNontemporalShift);
    ENUM_VALUE(SpvMemoryAccessMax);
};

GRD_REFLECT(SpvMemoryAccessMask) {
    ENUM_VALUE(SpvMemoryAccessMaskNone);
    ENUM_VALUE(SpvMemoryAccessVolatileMask);
    ENUM_VALUE(SpvMemoryAccessAlignedMask);
    ENUM_VALUE(SpvMemoryAccessNontemporalMask);
};

GRD_REFLECT(SpvScope) {
    ENUM_VALUE(SpvScopeCrossDevice);
    ENUM_VALUE(SpvScopeDevice);
    ENUM_VALUE(SpvScopeWorkgroup);
    ENUM_VALUE(SpvScopeSubgroup);
    ENUM_VALUE(SpvScopeInvocation);
    ENUM_VALUE(SpvScopeMax);
};

GRD_REFLECT(SpvGroupOperation) {
    ENUM_VALUE(SpvGroupOperationReduce);
    ENUM_VALUE(SpvGroupOperationInclusiveScan);
    ENUM_VALUE(SpvGroupOperationExclusiveScan);
    ENUM_VALUE(SpvGroupOperationMax);
};

GRD_REFLECT(SpvKernelEnqueueFlags) {
    ENUM_VALUE(SpvKernelEnqueueFlagsNoWait);
    ENUM_VALUE(SpvKernelEnqueueFlagsWaitKernel);
    ENUM_VALUE(SpvKernelEnqueueFlagsWaitWorkGroup);
    ENUM_VALUE(SpvKernelEnqueueFlagsMax);
};

GRD_REFLECT(SpvKernelProfilingInfoShift) {
    ENUM_VALUE(SpvKernelProfilingInfoCmdExecTimeShift);
    ENUM_VALUE(SpvKernelProfilingInfoMax);
};

GRD_REFLECT(SpvKernelProfilingInfoMask) {
    ENUM_VALUE(SpvKernelProfilingInfoMaskNone);
    ENUM_VALUE(SpvKernelProfilingInfoCmdExecTimeMask);
};

GRD_REFLECT(SpvCapability) {
    ENUM_VALUE(SpvCapabilityMatrix);
    ENUM_VALUE(SpvCapabilityShader);
    ENUM_VALUE(SpvCapabilityGeometry);
    ENUM_VALUE(SpvCapabilityTessellation);
    ENUM_VALUE(SpvCapabilityAddresses);
    ENUM_VALUE(SpvCapabilityLinkage);
    ENUM_VALUE(SpvCapabilityKernel);
    ENUM_VALUE(SpvCapabilityVector16);
    ENUM_VALUE(SpvCapabilityFloat16Buffer);
    ENUM_VALUE(SpvCapabilityFloat16);
    ENUM_VALUE(SpvCapabilityFloat64);
    ENUM_VALUE(SpvCapabilityInt64);
    ENUM_VALUE(SpvCapabilityInt64Atomics);
    ENUM_VALUE(SpvCapabilityImageBasic);
    ENUM_VALUE(SpvCapabilityImageReadWrite);
    ENUM_VALUE(SpvCapabilityImageMipmap);
    ENUM_VALUE(SpvCapabilityPipes);
    ENUM_VALUE(SpvCapabilityGroups);
    ENUM_VALUE(SpvCapabilityDeviceEnqueue);
    ENUM_VALUE(SpvCapabilityLiteralSampler);
    ENUM_VALUE(SpvCapabilityAtomicStorage);
    ENUM_VALUE(SpvCapabilityInt16);
    ENUM_VALUE(SpvCapabilityTessellationPointSize);
    ENUM_VALUE(SpvCapabilityGeometryPointSize);
    ENUM_VALUE(SpvCapabilityImageGatherExtended);
    ENUM_VALUE(SpvCapabilityStorageImageMultisample);
    ENUM_VALUE(SpvCapabilityUniformBufferArrayDynamicIndexing);
    ENUM_VALUE(SpvCapabilitySampledImageArrayDynamicIndexing);
    ENUM_VALUE(SpvCapabilityStorageBufferArrayDynamicIndexing);
    ENUM_VALUE(SpvCapabilityStorageImageArrayDynamicIndexing);
    ENUM_VALUE(SpvCapabilityClipDistance);
    ENUM_VALUE(SpvCapabilityCullDistance);
    ENUM_VALUE(SpvCapabilityImageCubeArray);
    ENUM_VALUE(SpvCapabilitySampleRateShading);
    ENUM_VALUE(SpvCapabilityImageRect);
    ENUM_VALUE(SpvCapabilitySampledRect);
    ENUM_VALUE(SpvCapabilityGenericPointer);
    ENUM_VALUE(SpvCapabilityInt8);
    ENUM_VALUE(SpvCapabilityInputAttachment);
    ENUM_VALUE(SpvCapabilitySparseResidency);
    ENUM_VALUE(SpvCapabilityMinLod);
    ENUM_VALUE(SpvCapabilitySampled1D);
    ENUM_VALUE(SpvCapabilityImage1D);
    ENUM_VALUE(SpvCapabilitySampledCubeArray);
    ENUM_VALUE(SpvCapabilitySampledBuffer);
    ENUM_VALUE(SpvCapabilityImageBuffer);
    ENUM_VALUE(SpvCapabilityImageMSArray);
    ENUM_VALUE(SpvCapabilityStorageImageExtendedFormats);
    ENUM_VALUE(SpvCapabilityImageQuery);
    ENUM_VALUE(SpvCapabilityDerivativeControl);
    ENUM_VALUE(SpvCapabilityInterpolationFunction);
    ENUM_VALUE(SpvCapabilityTransformFeedback);
    ENUM_VALUE(SpvCapabilityGeometryStreams);
    ENUM_VALUE(SpvCapabilityStorageImageReadWithoutFormat);
    ENUM_VALUE(SpvCapabilityStorageImageWriteWithoutFormat);
    ENUM_VALUE(SpvCapabilityMultiViewport);
    ENUM_VALUE(SpvCapabilitySubgroupDispatch);
    ENUM_VALUE(SpvCapabilityNamedBarrier);
    ENUM_VALUE(SpvCapabilityPipeStorage);
    ENUM_VALUE(SpvCapabilitySubgroupBallotKHR);
    ENUM_VALUE(SpvCapabilityDrawParameters);
    ENUM_VALUE(SpvCapabilitySubgroupVoteKHR);
    ENUM_VALUE(SpvCapabilityStorageBuffer16BitAccess);
    ENUM_VALUE(SpvCapabilityStorageUniformBufferBlock16);
    ENUM_VALUE(SpvCapabilityStorageUniform16);
    ENUM_VALUE(SpvCapabilityUniformAndStorageBuffer16BitAccess);
    ENUM_VALUE(SpvCapabilityStoragePushConstant16);
    ENUM_VALUE(SpvCapabilityStorageInputOutput16);
    ENUM_VALUE(SpvCapabilityDeviceGroup);
    ENUM_VALUE(SpvCapabilityMultiView);
    ENUM_VALUE(SpvCapabilityVariablePointersStorageBuffer);
    ENUM_VALUE(SpvCapabilityVariablePointers);
    ENUM_VALUE(SpvCapabilityAtomicStorageOps);
    ENUM_VALUE(SpvCapabilitySampleMaskPostDepthCoverage);
    ENUM_VALUE(SpvCapabilityImageGatherBiasLodAMD);
    ENUM_VALUE(SpvCapabilityFragmentMaskAMD);
    ENUM_VALUE(SpvCapabilityStencilExportEXT);
    ENUM_VALUE(SpvCapabilityImageReadWriteLodAMD);
    ENUM_VALUE(SpvCapabilitySampleMaskOverrideCoverageNV);
    ENUM_VALUE(SpvCapabilityGeometryShaderPassthroughNV);
    ENUM_VALUE(SpvCapabilityShaderViewportIndexLayerEXT);
    ENUM_VALUE(SpvCapabilityShaderViewportIndexLayerNV);
    ENUM_VALUE(SpvCapabilityShaderViewportMaskNV);
    ENUM_VALUE(SpvCapabilityShaderStereoViewNV);
    ENUM_VALUE(SpvCapabilityPerViewAttributesNV);
    ENUM_VALUE(SpvCapabilitySubgroupShuffleINTEL);
    ENUM_VALUE(SpvCapabilitySubgroupBufferBlockIOINTEL);
    ENUM_VALUE(SpvCapabilitySubgroupImageBlockIOINTEL);
    ENUM_VALUE(SpvCapabilityMax);
};

GRD_REFLECT(SpvOp) {
    ENUM_VALUE(SpvOpNop);
    ENUM_VALUE(SpvOpUndef);
    ENUM_VALUE(SpvOpSourceContinued);
    ENUM_VALUE(SpvOpSource);
    ENUM_VALUE(SpvOpSourceExtension);
    ENUM_VALUE(SpvOpName);
    ENUM_VALUE(SpvOpMemberName);
    ENUM_VALUE(SpvOpString);
    ENUM_VALUE(SpvOpLine);
    ENUM_VALUE(SpvOpExtension);
    ENUM_VALUE(SpvOpExtInstImport);
    ENUM_VALUE(SpvOpExtInst);
    ENUM_VALUE(SpvOpMemoryModel);
    ENUM_VALUE(SpvOpEntryPoint);
    ENUM_VALUE(SpvOpExecutionMode);
    ENUM_VALUE(SpvOpCapability);
    ENUM_VALUE(SpvOpTypeVoid);
    ENUM_VALUE(SpvOpTypeBool);
    ENUM_VALUE(SpvOpTypeInt);
    ENUM_VALUE(SpvOpTypeFloat);
    ENUM_VALUE(SpvOpTypeVector);
    ENUM_VALUE(SpvOpTypeMatrix);
    ENUM_VALUE(SpvOpTypeImage);
    ENUM_VALUE(SpvOpTypeSampler);
    ENUM_VALUE(SpvOpTypeSampledImage);
    ENUM_VALUE(SpvOpTypeArray);
    ENUM_VALUE(SpvOpTypeRuntimeArray);
    ENUM_VALUE(SpvOpTypeStruct);
    ENUM_VALUE(SpvOpTypeOpaque);
    ENUM_VALUE(SpvOpTypePointer);
    ENUM_VALUE(SpvOpTypeFunction);
    ENUM_VALUE(SpvOpTypeEvent);
    ENUM_VALUE(SpvOpTypeDeviceEvent);
    ENUM_VALUE(SpvOpTypeReserveId);
    ENUM_VALUE(SpvOpTypeQueue);
    ENUM_VALUE(SpvOpTypePipe);
    ENUM_VALUE(SpvOpTypeForwardPointer);
    ENUM_VALUE(SpvOpConstantTrue);
    ENUM_VALUE(SpvOpConstantFalse);
    ENUM_VALUE(SpvOpConstant);
    ENUM_VALUE(SpvOpConstantComposite);
    ENUM_VALUE(SpvOpConstantSampler);
    ENUM_VALUE(SpvOpConstantNull);
    ENUM_VALUE(SpvOpSpecConstantTrue);
    ENUM_VALUE(SpvOpSpecConstantFalse);
    ENUM_VALUE(SpvOpSpecConstant);
    ENUM_VALUE(SpvOpSpecConstantComposite);
    ENUM_VALUE(SpvOpSpecConstantOp);
    ENUM_VALUE(SpvOpFunction);
    ENUM_VALUE(SpvOpFunctionParameter);
    ENUM_VALUE(SpvOpFunctionEnd);
    ENUM_VALUE(SpvOpFunctionCall);
    ENUM_VALUE(SpvOpVariable);
    ENUM_VALUE(SpvOpImageTexelPointer);
    ENUM_VALUE(SpvOpLoad);
    ENUM_VALUE(SpvOpStore);
    ENUM_VALUE(SpvOpCopyMemory);
    ENUM_VALUE(SpvOpCopyMemorySized);
    ENUM_VALUE(SpvOpAccessChain);
    ENUM_VALUE(SpvOpInBoundsAccessChain);
    ENUM_VALUE(SpvOpPtrAccessChain);
    ENUM_VALUE(SpvOpArrayLength);
    ENUM_VALUE(SpvOpGenericPtrMemSemantics);
    ENUM_VALUE(SpvOpInBoundsPtrAccessChain);
    ENUM_VALUE(SpvOpDecorate);
    ENUM_VALUE(SpvOpMemberDecorate);
    ENUM_VALUE(SpvOpDecorationGroup);
    ENUM_VALUE(SpvOpGroupDecorate);
    ENUM_VALUE(SpvOpGroupMemberDecorate);
    ENUM_VALUE(SpvOpVectorExtractDynamic);
    ENUM_VALUE(SpvOpVectorInsertDynamic);
    ENUM_VALUE(SpvOpVectorShuffle);
    ENUM_VALUE(SpvOpCompositeConstruct);
    ENUM_VALUE(SpvOpCompositeExtract);
    ENUM_VALUE(SpvOpCompositeInsert);
    ENUM_VALUE(SpvOpCopyObject);
    ENUM_VALUE(SpvOpTranspose);
    ENUM_VALUE(SpvOpSampledImage);
    ENUM_VALUE(SpvOpImageSampleImplicitLod);
    ENUM_VALUE(SpvOpImageSampleExplicitLod);
    ENUM_VALUE(SpvOpImageSampleDrefImplicitLod);
    ENUM_VALUE(SpvOpImageSampleDrefExplicitLod);
    ENUM_VALUE(SpvOpImageSampleProjImplicitLod);
    ENUM_VALUE(SpvOpImageSampleProjExplicitLod);
    ENUM_VALUE(SpvOpImageSampleProjDrefImplicitLod);
    ENUM_VALUE(SpvOpImageSampleProjDrefExplicitLod);
    ENUM_VALUE(SpvOpImageFetch);
    ENUM_VALUE(SpvOpImageGather);
    ENUM_VALUE(SpvOpImageDrefGather);
    ENUM_VALUE(SpvOpImageRead);
    ENUM_VALUE(SpvOpImageWrite);
    ENUM_VALUE(SpvOpImage);
    ENUM_VALUE(SpvOpImageQueryFormat);
    ENUM_VALUE(SpvOpImageQueryOrder);
    ENUM_VALUE(SpvOpImageQuerySizeLod);
    ENUM_VALUE(SpvOpImageQuerySize);
    ENUM_VALUE(SpvOpImageQueryLod);
    ENUM_VALUE(SpvOpImageQueryLevels);
    ENUM_VALUE(SpvOpImageQuerySamples);
    ENUM_VALUE(SpvOpConvertFToU);
    ENUM_VALUE(SpvOpConvertFToS);
    ENUM_VALUE(SpvOpConvertSToF);
    ENUM_VALUE(SpvOpConvertUToF);
    ENUM_VALUE(SpvOpUConvert);
    ENUM_VALUE(SpvOpSConvert);
    ENUM_VALUE(SpvOpFConvert);
    ENUM_VALUE(SpvOpQuantizeToF16);
    ENUM_VALUE(SpvOpConvertPtrToU);
    ENUM_VALUE(SpvOpSatConvertSToU);
    ENUM_VALUE(SpvOpSatConvertUToS);
    ENUM_VALUE(SpvOpConvertUToPtr);
    ENUM_VALUE(SpvOpPtrCastToGeneric);
    ENUM_VALUE(SpvOpGenericCastToPtr);
    ENUM_VALUE(SpvOpGenericCastToPtrExplicit);
    ENUM_VALUE(SpvOpBitcast);
    ENUM_VALUE(SpvOpSNegate);
    ENUM_VALUE(SpvOpFNegate);
    ENUM_VALUE(SpvOpIAdd);
    ENUM_VALUE(SpvOpFAdd);
    ENUM_VALUE(SpvOpISub);
    ENUM_VALUE(SpvOpFSub);
    ENUM_VALUE(SpvOpIMul);
    ENUM_VALUE(SpvOpFMul);
    ENUM_VALUE(SpvOpUDiv);
    ENUM_VALUE(SpvOpSDiv);
    ENUM_VALUE(SpvOpFDiv);
    ENUM_VALUE(SpvOpUMod);
    ENUM_VALUE(SpvOpSRem);
    ENUM_VALUE(SpvOpSMod);
    ENUM_VALUE(SpvOpFRem);
    ENUM_VALUE(SpvOpFMod);
    ENUM_VALUE(SpvOpVectorTimesScalar);
    ENUM_VALUE(SpvOpMatrixTimesScalar);
    ENUM_VALUE(SpvOpVectorTimesMatrix);
    ENUM_VALUE(SpvOpMatrixTimesVector);
    ENUM_VALUE(SpvOpMatrixTimesMatrix);
    ENUM_VALUE(SpvOpOuterProduct);
    ENUM_VALUE(SpvOpDot);
    ENUM_VALUE(SpvOpIAddCarry);
    ENUM_VALUE(SpvOpISubBorrow);
    ENUM_VALUE(SpvOpUMulExtended);
    ENUM_VALUE(SpvOpSMulExtended);
    ENUM_VALUE(SpvOpAny);
    ENUM_VALUE(SpvOpAll);
    ENUM_VALUE(SpvOpIsNan);
    ENUM_VALUE(SpvOpIsInf);
    ENUM_VALUE(SpvOpIsFinite);
    ENUM_VALUE(SpvOpIsNormal);
    ENUM_VALUE(SpvOpSignBitSet);
    ENUM_VALUE(SpvOpLessOrGreater);
    ENUM_VALUE(SpvOpOrdered);
    ENUM_VALUE(SpvOpUnordered);
    ENUM_VALUE(SpvOpLogicalEqual);
    ENUM_VALUE(SpvOpLogicalNotEqual);
    ENUM_VALUE(SpvOpLogicalOr);
    ENUM_VALUE(SpvOpLogicalAnd);
    ENUM_VALUE(SpvOpLogicalNot);
    ENUM_VALUE(SpvOpSelect);
    ENUM_VALUE(SpvOpIEqual);
    ENUM_VALUE(SpvOpINotEqual);
    ENUM_VALUE(SpvOpUGreaterThan);
    ENUM_VALUE(SpvOpSGreaterThan);
    ENUM_VALUE(SpvOpUGreaterThanEqual);
    ENUM_VALUE(SpvOpSGreaterThanEqual);
    ENUM_VALUE(SpvOpULessThan);
    ENUM_VALUE(SpvOpSLessThan);
    ENUM_VALUE(SpvOpULessThanEqual);
    ENUM_VALUE(SpvOpSLessThanEqual);
    ENUM_VALUE(SpvOpFOrdEqual);
    ENUM_VALUE(SpvOpFUnordEqual);
    ENUM_VALUE(SpvOpFOrdNotEqual);
    ENUM_VALUE(SpvOpFUnordNotEqual);
    ENUM_VALUE(SpvOpFOrdLessThan);
    ENUM_VALUE(SpvOpFUnordLessThan);
    ENUM_VALUE(SpvOpFOrdGreaterThan);
    ENUM_VALUE(SpvOpFUnordGreaterThan);
    ENUM_VALUE(SpvOpFOrdLessThanEqual);
    ENUM_VALUE(SpvOpFUnordLessThanEqual);
    ENUM_VALUE(SpvOpFOrdGreaterThanEqual);
    ENUM_VALUE(SpvOpFUnordGreaterThanEqual);
    ENUM_VALUE(SpvOpShiftRightLogical);
    ENUM_VALUE(SpvOpShiftRightArithmetic);
    ENUM_VALUE(SpvOpShiftLeftLogical);
    ENUM_VALUE(SpvOpBitwiseOr);
    ENUM_VALUE(SpvOpBitwiseXor);
    ENUM_VALUE(SpvOpBitwiseAnd);
    ENUM_VALUE(SpvOpNot);
    ENUM_VALUE(SpvOpBitFieldInsert);
    ENUM_VALUE(SpvOpBitFieldSExtract);
    ENUM_VALUE(SpvOpBitFieldUExtract);
    ENUM_VALUE(SpvOpBitReverse);
    ENUM_VALUE(SpvOpBitCount);
    ENUM_VALUE(SpvOpDPdx);
    ENUM_VALUE(SpvOpDPdy);
    ENUM_VALUE(SpvOpFwidth);
    ENUM_VALUE(SpvOpDPdxFine);
    ENUM_VALUE(SpvOpDPdyFine);
    ENUM_VALUE(SpvOpFwidthFine);
    ENUM_VALUE(SpvOpDPdxCoarse);
    ENUM_VALUE(SpvOpDPdyCoarse);
    ENUM_VALUE(SpvOpFwidthCoarse);
    ENUM_VALUE(SpvOpEmitVertex);
    ENUM_VALUE(SpvOpEndPrimitive);
    ENUM_VALUE(SpvOpEmitStreamVertex);
    ENUM_VALUE(SpvOpEndStreamPrimitive);
    ENUM_VALUE(SpvOpControlBarrier);
    ENUM_VALUE(SpvOpMemoryBarrier);
    ENUM_VALUE(SpvOpAtomicLoad);
    ENUM_VALUE(SpvOpAtomicStore);
    ENUM_VALUE(SpvOpAtomicExchange);
    ENUM_VALUE(SpvOpAtomicCompareExchange);
    ENUM_VALUE(SpvOpAtomicCompareExchangeWeak);
    ENUM_VALUE(SpvOpAtomicIIncrement);
    ENUM_VALUE(SpvOpAtomicIDecrement);
    ENUM_VALUE(SpvOpAtomicIAdd);
    ENUM_VALUE(SpvOpAtomicISub);
    ENUM_VALUE(SpvOpAtomicSMin);
    ENUM_VALUE(SpvOpAtomicUMin);
    ENUM_VALUE(SpvOpAtomicSMax);
    ENUM_VALUE(SpvOpAtomicUMax);
    ENUM_VALUE(SpvOpAtomicAnd);
    ENUM_VALUE(SpvOpAtomicOr);
    ENUM_VALUE(SpvOpAtomicXor);
    ENUM_VALUE(SpvOpPhi);
    ENUM_VALUE(SpvOpLoopMerge);
    ENUM_VALUE(SpvOpSelectionMerge);
    ENUM_VALUE(SpvOpLabel);
    ENUM_VALUE(SpvOpBranch);
    ENUM_VALUE(SpvOpBranchConditional);
    ENUM_VALUE(SpvOpSwitch);
    ENUM_VALUE(SpvOpKill);
    ENUM_VALUE(SpvOpReturn);
    ENUM_VALUE(SpvOpReturnValue);
    ENUM_VALUE(SpvOpUnreachable);
    ENUM_VALUE(SpvOpLifetimeStart);
    ENUM_VALUE(SpvOpLifetimeStop);
    ENUM_VALUE(SpvOpGroupAsyncCopy);
    ENUM_VALUE(SpvOpGroupWaitEvents);
    ENUM_VALUE(SpvOpGroupAll);
    ENUM_VALUE(SpvOpGroupAny);
    ENUM_VALUE(SpvOpGroupBroadcast);
    ENUM_VALUE(SpvOpGroupIAdd);
    ENUM_VALUE(SpvOpGroupFAdd);
    ENUM_VALUE(SpvOpGroupFMin);
    ENUM_VALUE(SpvOpGroupUMin);
    ENUM_VALUE(SpvOpGroupSMin);
    ENUM_VALUE(SpvOpGroupFMax);
    ENUM_VALUE(SpvOpGroupUMax);
    ENUM_VALUE(SpvOpGroupSMax);
    ENUM_VALUE(SpvOpReadPipe);
    ENUM_VALUE(SpvOpWritePipe);
    ENUM_VALUE(SpvOpReservedReadPipe);
    ENUM_VALUE(SpvOpReservedWritePipe);
    ENUM_VALUE(SpvOpReserveReadPipePackets);
    ENUM_VALUE(SpvOpReserveWritePipePackets);
    ENUM_VALUE(SpvOpCommitReadPipe);
    ENUM_VALUE(SpvOpCommitWritePipe);
    ENUM_VALUE(SpvOpIsValidReserveId);
    ENUM_VALUE(SpvOpGetNumPipePackets);
    ENUM_VALUE(SpvOpGetMaxPipePackets);
    ENUM_VALUE(SpvOpGroupReserveReadPipePackets);
    ENUM_VALUE(SpvOpGroupReserveWritePipePackets);
    ENUM_VALUE(SpvOpGroupCommitReadPipe);
    ENUM_VALUE(SpvOpGroupCommitWritePipe);
    ENUM_VALUE(SpvOpEnqueueMarker);
    ENUM_VALUE(SpvOpEnqueueKernel);
    ENUM_VALUE(SpvOpGetKernelNDrangeSubGroupCount);
    ENUM_VALUE(SpvOpGetKernelNDrangeMaxSubGroupSize);
    ENUM_VALUE(SpvOpGetKernelWorkGroupSize);
    ENUM_VALUE(SpvOpGetKernelPreferredWorkGroupSizeMultiple);
    ENUM_VALUE(SpvOpRetainEvent);
    ENUM_VALUE(SpvOpReleaseEvent);
    ENUM_VALUE(SpvOpCreateUserEvent);
    ENUM_VALUE(SpvOpIsValidEvent);
    ENUM_VALUE(SpvOpSetUserEventStatus);
    ENUM_VALUE(SpvOpCaptureEventProfilingInfo);
    ENUM_VALUE(SpvOpGetDefaultQueue);
    ENUM_VALUE(SpvOpBuildNDRange);
    ENUM_VALUE(SpvOpImageSparseSampleImplicitLod);
    ENUM_VALUE(SpvOpImageSparseSampleExplicitLod);
    ENUM_VALUE(SpvOpImageSparseSampleDrefImplicitLod);
    ENUM_VALUE(SpvOpImageSparseSampleDrefExplicitLod);
    ENUM_VALUE(SpvOpImageSparseSampleProjImplicitLod);
    ENUM_VALUE(SpvOpImageSparseSampleProjExplicitLod);
    ENUM_VALUE(SpvOpImageSparseSampleProjDrefImplicitLod);
    ENUM_VALUE(SpvOpImageSparseSampleProjDrefExplicitLod);
    ENUM_VALUE(SpvOpImageSparseFetch);
    ENUM_VALUE(SpvOpImageSparseGather);
    ENUM_VALUE(SpvOpImageSparseDrefGather);
    ENUM_VALUE(SpvOpImageSparseTexelsResident);
    ENUM_VALUE(SpvOpNoLine);
    ENUM_VALUE(SpvOpAtomicFlagTestAndSet);
    ENUM_VALUE(SpvOpAtomicFlagClear);
    ENUM_VALUE(SpvOpImageSparseRead);
    ENUM_VALUE(SpvOpSizeOf);
    ENUM_VALUE(SpvOpTypePipeStorage);
    ENUM_VALUE(SpvOpConstantPipeStorage);
    ENUM_VALUE(SpvOpCreatePipeFromPipeStorage);
    ENUM_VALUE(SpvOpGetKernelLocalSizeForSubgroupCount);
    ENUM_VALUE(SpvOpGetKernelMaxNumSubgroups);
    ENUM_VALUE(SpvOpTypeNamedBarrier);
    ENUM_VALUE(SpvOpNamedBarrierInitialize);
    ENUM_VALUE(SpvOpMemoryNamedBarrier);
    ENUM_VALUE(SpvOpModuleProcessed);
    ENUM_VALUE(SpvOpExecutionModeId);
    ENUM_VALUE(SpvOpDecorateId);
    ENUM_VALUE(SpvOpSubgroupBallotKHR);
    ENUM_VALUE(SpvOpSubgroupFirstInvocationKHR);
    ENUM_VALUE(SpvOpSubgroupAllKHR);
    ENUM_VALUE(SpvOpSubgroupAnyKHR);
    ENUM_VALUE(SpvOpSubgroupAllEqualKHR);
    ENUM_VALUE(SpvOpSubgroupReadInvocationKHR);
    ENUM_VALUE(SpvOpGroupIAddNonUniformAMD);
    ENUM_VALUE(SpvOpGroupFAddNonUniformAMD);
    ENUM_VALUE(SpvOpGroupFMinNonUniformAMD);
    ENUM_VALUE(SpvOpGroupUMinNonUniformAMD);
    ENUM_VALUE(SpvOpGroupSMinNonUniformAMD);
    ENUM_VALUE(SpvOpGroupFMaxNonUniformAMD);
    ENUM_VALUE(SpvOpGroupUMaxNonUniformAMD);
    ENUM_VALUE(SpvOpGroupSMaxNonUniformAMD);
    ENUM_VALUE(SpvOpFragmentMaskFetchAMD);
    ENUM_VALUE(SpvOpFragmentFetchAMD);
    ENUM_VALUE(SpvOpSubgroupShuffleINTEL);
    ENUM_VALUE(SpvOpSubgroupShuffleDownINTEL);
    ENUM_VALUE(SpvOpSubgroupShuffleUpINTEL);
    ENUM_VALUE(SpvOpSubgroupShuffleXorINTEL);
    ENUM_VALUE(SpvOpSubgroupBlockReadINTEL);
    ENUM_VALUE(SpvOpSubgroupBlockWriteINTEL);
    ENUM_VALUE(SpvOpSubgroupImageBlockReadINTEL);
    ENUM_VALUE(SpvOpSubgroupImageBlockWriteINTEL);
    ENUM_VALUE(SpvOpDecorateStringGOOGLE);
    ENUM_VALUE(SpvOpMemberDecorateStringGOOGLE);
    ENUM_VALUE(SpvOpMax);
};

